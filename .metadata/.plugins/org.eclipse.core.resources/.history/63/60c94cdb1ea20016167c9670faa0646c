import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class Classy {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		StringBuilder sb = new StringBuilder();
		while (sc.hasNext()) {
			int num = sc.nextInt();
			sc.nextLine();
			Person[] list = new Person[num];
			int index = 0;
			while (index < num) {
				String line = sc.nextLine();
				String[] level = line.split(" ");
				list[index] = new Person(level);

				index++;
			}
			Arrays.sort(list);
			//	Arrays.sort(list, Collections.reverseOrder());

			for (Person person : list) {
				sb.append(person.name);
				sb.append("\n");
				//	System.out.println(person.name);
			}
		}
	//	String string = sb.toString();
		System.out.print(sb.toString());
	}
	
	public static class Person implements Comparable<Person>{
		String name;
		int level;
		int count = 0;
		
		public Person(String[] line) {
			name = line[0].substring(0, line[0].length() - 1);
			level = 0;
			for (int i = 1; i < line.length - 1; i++) {
				level *= 10;
				int num = line[i].equals("upper") ? 3 : line[i].equals("middle") ? 2 : 1;			
				level += num;
				count++;
			}
		}

		@Override
		public int compareTo(Person other) {
			// TODO Auto-generated method stub
			int compare = 0;
			int temp1 = this.level;
			int temp2 = other.level;
			
			while (temp1 > 0 && temp2 > 0 && compare == 0) {
				if (temp1 % 10 > temp2 % 10) 
					compare = -1;
				else if (temp1 % 10 < temp2 % 10)
					compare = 1;
				else {
					temp1 /= 10;
					temp2 /= 10;
				}				
			}
			
			while (temp1 > 0 && compare == 0) {
				if (temp1 % 10 > 2) {
					compare = -1;
				} else if (temp1 % 10 < 2) {
					compare = 1;
				} else {
					temp1 /= 10;
				}
			}
			
			while (temp2 > 0 && compare == 0) {
				if (temp2 % 10 > 2) {
					compare = 1;
				} else if (temp2 % 10 < 2) {
					compare = -1;
				} else {
					temp2 /= 10;
				}
			}
			
//			if (temp1 > 0) {
//				compare = (temp1 % 10 > 2) ? 1 : temp1 % 10 == 2 ? 0 : -1;
//			} else if (temp2 > 0) {
//				compare = (temp2 % 10 > 2) ? 1 : temp2 % 10 == 2 ? 0 : -1;
//			}
			
			if (compare == 0) {
				compare = name.compareTo(other.name);
			}
			
			return compare;
		}
		
		
		
	}
	
}
